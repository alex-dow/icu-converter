/*
* PEG version of the ICU ResourceBundle formal format
*
* [1] http://source.icu-project.org/repos/icu/icuhtml/trunk/design/bnf_rb.txt
* 
* Copyright (c) 2015 Alex Dowgailenko
* Licensed under the MIT License
* https://github.com/alex-dow/icu-converter/blog/master/LICENSE
*
*/
{
  function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  }

  function processTableWithKey(keyName, o) {
      
      var obj = {};
      obj[keyName] = {};

      for (var i = 0; i < o.length; i++) {

        if (typeof o[i] === "string") {
          obj[keyName] = o[i];
        
        } else if (typeof o[i] === "number") {
          obj[keyName] = o[i];
        } else {
          for (var k in o[i]) {
            if (o[i].hasOwnProperty(k)) {
              obj[keyName][k] = o[i][k];
            }
          }
        }
      }
      
      return obj;
  }

  function processTableWithoutKey(o) {
    var obj = {};
    for (var i = 0; i < o.length; i++) {
      obj[o[i][1]] = o[i][2];
    }

    return obj;
  }

  function processArrayWithKey(keyName, o) {
      var obj = {};
      if (o.length === 1) {
        o = o[0];
      }
      obj[keyName] = o;
      return obj;
  }

  function processArrayWithKeyOneItem(keyName, o) {
      var obj = {};
      obj[keyName] = [o];
      return obj;
  }

  function processArrayWithoutKey(o) {

    var obj = [];
    return obj;

  }
}

start
  = o:resourceBundle ws {
      return o;
      var res = {}
      res[keyName] = o;
      return res;
    }

resourceBundle
  = ws "{" ws "}" {
      return null;
    }


  / keyName:bundleName ":table" ws "{" ws o:(resourceBundle)+ ws "}" ws {
      return processTableWithKey(keyName, o);
    }
  / keyName:bundleName ":array" ws "{" ws o:(arrayFormat) ws "}" ws {
      return processArrayWithKey(keyName, o);     
    }
  / keyName:bundleName ":array" ws "{" ws o:(resourceBundle) ws "}" ws {
      return processArrayWithKeyOneItem(keyName, o);
    }
  / keyName:bundleName ":string" ws "{" ws o:(stringFormat) ws "}" ws {
      var obj = {};
      obj[keyName] = o;
      return obj;
    }

  / ":table" "{" ws o:(resourceBundle)+ ws "}" {
      return processTableWithoutKey(o);
    }
  / ":array" ws "{" ws o:(arrayFormat) ws "}" {
      if (!arrayType && o.length === 1) {
        o = o[0];
      }
          
      return o;
    }
  / ":array" ws "{" ws o:(resourceBundle) ws "}" {
      return [o];
    }
  / ":string" "{" ws o:(stringFormat) ws "}" {
      return o;
    }
  / "{" ws o:(stringFormat) ws "}" {
       return o;
    }

  / "{" ws o:(arrayFormat) ws "}" {
      return o;
    }
  / "{" ws o:(resourceBundle) ws "}" {
      return o;
    }

  / ws o:(integerFormat) ws {
      return o;
    }

  / o:(stringFormat) {
      return o;
    }

  / keyName:bundleName ws "{" ws o:(arrayFormat) ws "}" ws {
      var obj = {};
      if (o.length === 1) {
        o = o[0];
      }
      obj[keyName] = o;
      return obj;
    }

  / keyName:bundleName ws "{" ws o:(resourceBundle)+ ws "}" ws {
      return processTableWithKey(keyName, o);
    }


  



arrayFormat
  = o:resourceBundle ws remaining:("," ws resourceBundle)+ ws {
     var oa = [o];
     for (var i = 0; i < remaining.length; i++) {
       oa.push(remaining[i][2]);
     }
     return oa;
    }
     
stringFormat
  = o:('"' ws chars ws '"' ws)+ {

      var str = "";
      for (var i = 0; i < o.length; i++) {
        str = str + o[i][2];
      }
      return str;
    }

integerFormat
  = o:number {
      var sign = o[0];
      var number = o[1].join("");
      var val;
      if (sign) {
        val = parseInt(sign + number);
      } else {
        val = parseInt(number);
      }

      return val;
    }
     

bundleName 
  = o:invariantChars {
    return o.trim();
  }

dataType = ":table" / ":array" / ":string" / ":integer" / ":int" / ":intvector"

invariantChar 
  = [A-Z] 
  / [a-z] 
  / [0-9] 
  / ' ' 
  / '"' 
  / '%' 
  / '&' 
  / "'" 
  / '(' 
  / ')' 
  / '*'
  / '+' 
  / ',' 
  / '-' 
  / '.' 
  / '/'
  / ';' 
  / '<' 
  / '=' 
  / '>' 
  / '?' 
  / '_'

invariantChars = c:invariantChar+ {
  return c.join("");
}

hexDigit = [0-9A-Fa-f]
number = sign? digit+
sign = "-"
digit = [0-9]

char = [\x20-\x21\x23-\x5B\x5D-\u10FFFF\t\r\n]
chars = chars:char* { return chars.join(""); }

ws = [ \t\n\r]*
